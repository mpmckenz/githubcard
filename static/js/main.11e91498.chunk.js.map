{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["githubProfile","App","state","user","active","componentDidMount","event","fetch","then","response","json","profileInfo","_this","setState","console","log","Object","entries","handleClick","previousState","react_default","a","createElement","lib","id","onClick","this","className","header","image","avatar_url","Typography_default","variant","gutterBottom","name","login","public_repos","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uNAIMA,EAAgB,wCAiEPC,6MA3DbC,MAAQ,CAAEC,KAAM,GAAIC,QAAQ,KAC5BC,kBAAoB,SAAAC,GAClBC,MAAMP,GACHQ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,EAAKC,SAAS,CAAEV,KAAMQ,IACtBG,QAAQC,IAAIC,OAAOC,QAAQ,CAAEN,sBAInCO,YAAc,SAAAZ,GACZM,EAAKC,SAAS,SAAAM,GAAa,MAAK,CAAEf,QAASe,EAAcf,mFAIzD,OACEgB,EAAAC,EAAAC,cAACC,EAAA,UAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,OAAD,KACEH,EAAAC,EAAAC,cAAA,OACEE,GAAG,UACHC,QAASC,KAAKR,YACdS,UAAU,yBAEVP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aAGlBD,KAAKxB,MAAME,OACVgB,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACEI,UAAU,QACVC,OACER,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UACNJ,EAAAC,EAAAC,cAACC,EAAA,UAAD,CAAWM,MAAOH,KAAKxB,MAAMC,KAAK2B,YAChCV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYW,QAAQ,KAAKC,cAAY,GACnCb,EAAAC,EAAAC,cAAA,SAAII,KAAKxB,MAAMC,KAAK+B,MACpBd,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYW,QAAQ,KAAKC,cAAY,GACnCb,EAAAC,EAAAC,cAAA,oBACCI,KAAKxB,MAAMC,KAAKgC,MACjBf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,iCAJF,IAI+BI,KAAKxB,MAAMC,KAAKiC,aAC7ChB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGe,KAAK,uCAAR,qBAQR,aAtDMC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.11e91498.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button, Card, CardTitle, Container } from \"react-materialize\";\nimport Typography from \"@material-ui/core/Typography\";\nconst githubProfile = \"https://api.github.com/users/mpmckenz\";\n\n// const testArr = { numberone: 1, numbertwo: 2, numberthree: 3 };\n// console.log(Object.entries(testArr));\n\nclass App extends Component {\n  state = { user: {}, active: false };\n  componentDidMount = event => {\n    fetch(githubProfile)\n      .then(response => response.json())\n      .then(profileInfo => {\n        this.setState({ user: profileInfo });\n        console.log(Object.entries({ profileInfo }));\n      });\n  };\n\n  handleClick = event => {\n    this.setState(previousState => ({ active: !previousState.active }));\n  };\n\n  render() {\n    return (\n      <Container>\n        <Button>\n          <div\n            id=\"spinner\"\n            onClick={this.handleClick}\n            className=\"trinity-rings-spinner\"\n          >\n            <div className=\"circle\" />\n            <div className=\"circle\" />\n            <div className=\"circle\" />\n          </div>\n        </Button>\n        {this.state.active ? (\n          <Card\n            className=\"small\"\n            header={\n              <div id=\"parent\">\n                <CardTitle image={this.state.user.avatar_url}>\n                  <br />\n                  <Typography variant=\"h3\" gutterBottom>\n                    <b>{this.state.user.name}</b>\n                    <br />\n                  </Typography>\n                  <Typography variant=\"h4\" gutterBottom>\n                    <b>Login: </b>\n                    {this.state.user.login}\n                    <br />\n                    <b>Public repositories:</b> {this.state.user.public_repos}\n                    <br />\n                    <a href=\"https://epic-spinners.epicmax.co/#/\">\n                      Moving Icons\n                    </a>\n                  </Typography>\n                </CardTitle>\n              </div>\n            }\n          />\n        ) : null}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n\n/* {Object.entries(user).map(([key, value]) => {\n      return (\n        <div>{key}: {value.toString()}</div>\n      )})\n      } */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}